//// version 4 (area: 5541)
module SMJ(
    // Input signals
    hand_n0,
    hand_n1,
    hand_n2,
    hand_n3,
    hand_n4,
    // Output signals
    out_data
);
//---------------------------------------------------------------------
//   INPUT AND OUTPUT DECLARATION                         
//---------------------------------------------------------------------
input [5:0] hand_n0;
input [5:0] hand_n1;
input [5:0] hand_n2;
input [5:0] hand_n3;
input [5:0] hand_n4;
output logic [1:0] out_data;
//---------------------------------------------------------------------
//   LOGIC DECLARATION
//---------------------------------------------------------------------
logic [5:0] n [0:4];
logic [5:0] temp;
int j;
//---------------------------------------------------------------------
//   Your design                        
//---------------------------------------------------------------------
always_comb begin 
    n[0] = hand_n0;
	n[1]= hand_n1;
	n[2]= hand_n2;
	n[3]= hand_n3;
	n[4]= hand_n4; 
    //////////////////////////////////////// insertion sort
    for(int i = 0;i < 5;i++) begin
		temp = n[i];
		j = i - 1;
		while(temp < n[j] && j >= 0) begin
			n[j+1] = n[j];
			j--;
		end
		n[j+1] = temp;
	end
    out_data = 0;
    ///////////////////////////////////// impossible out_data = 01 
    if( (  
		 n[0][5:4] != 0 && n[0][3:0] > 8 ) || (n[0][5:4] == 0 && n[0][3:0] > 6) ||
        (n[1][5:4] != 0 && n[1][3:0] > 8 ) || (n[1][5:4] == 0 && n[1][3:0] > 6) ||
        (n[2][5:4] != 0 && n[2][3:0] > 8 ) || (n[2][5:4] == 0 && n[2][3:0] > 6) ||
        (n[3][5:4] != 0 && n[3][3:0] > 8 ) || (n[3][5:4] == 0 && n[3][3:0] > 6) ||
        (n[4][5:4] != 0 && n[4][3:0] > 8 ) || (n[4][5:4] == 0 && n[4][3:0] > 6)  ||
		(n[4] == n[3] && n[3] == n[2] && n[2] == n[1] && n[1] == n[0])) 
        begin out_data = 1; end

    else begin
		/////////////////////// find triple
       	if(n[0] == n[1] && n[1] == n[2] && n[3] == n[4] || n[0] == n[1] && n[2] == n[3] && n[3] == n[4]) out_data = 3;

        /////////////////////// find sequence
        if(n[0] + 1 == n[1] && n[1] == n[2] && n[2] == n[3] && n[3] + 1 == n[4]) out_data = 2;
		if(n[0][5:4] != 0 && n[1][5:4] != 0 && n[2][5:4] != 0  && n[1] - 1 == n[0] && n[1] + 1 == n[2] && n[3] == n[4] || n[2][5:4] != 0 && n[3][5:4] != 0 && n[4][5:4] != 0  && n[3] - 1 == n[2] && n[3] + 1 == n[4] && n[0] == n[1] ) out_data = 2;
        //if(n[2][5:4] != 0 && n[3][5:4] != 0 && n[4][5:4] != 0  && n[3] - 1 == n[2] && n[3] + 1 == n[4] && n[0] == n[1]) out_data = 2;
       
		
		
    end
    
end
endmodule
