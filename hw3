///////////// area 3758
module TL(
  // Input signals
  clk,
  rst_n,
  in_valid,
  car_main_s,
  car_main_lt,
  car_side_s,
  car_side_lt,
  // Output signals
  out_valid,
  light_main,
  light_side
);

//---------------------------------------------------------------------
//   PORT DECLARATION
//---------------------------------------------------------------------
input clk, rst_n, in_valid;
input [2:0] car_main_s, car_main_lt, car_side_s, car_side_lt; 
output logic out_valid;
output logic [1:0]light_main, light_side;
/////////////////////////////////////// state , state timer
logic [2:0] state;
logic [2:0] state_nxt;
logic state_change;
///////////////////////////////// invalid outvalid
logic out_valid_nxt;
logic out_valid_reg;
logic out_valid_delay;

logic [2:0] car_main_s_nxt,car_main_lt_nxt,car_side_s_nxt,car_side_lt_nxt;
logic [2:0] car_main_s_reg,car_main_lt_reg,car_side_s_reg,car_side_lt_reg;
///////////////////////////////////////////////////light, light timer
logic [1:0] light_main_nxt, light_side_nxt;
logic [3:0] green;
logic yellow;
logic [1:0] red;
logic [1:0] light_state;
logic [1:0] light_state_nxt;
logic [3:0] light_time;
logic light_timer_done;
logic light_load;
logic light_load_nxt;

 /////////////////////////////////////////// state FSM
 parameter MainStraight = 0;
 parameter MainLeft = 1;
 parameter SideStraight = 2;
 parameter SideLeft = 3;
 parameter Default = 4;

 always_ff @(posedge clk or negedge rst_n) begin
  if(!rst_n) begin
    state <= Default;
  end
  else begin
    state <= state_nxt;
  end
 end

 always_comb begin
if(!out_valid_reg) begin
    state_nxt = Default;
  end
  else begin
    case(state)
      MainStraight: begin
        if( (state_change || !car_main_s_reg) && !car_main_lt_reg && !car_side_s_reg && !car_side_lt_reg) begin state_nxt = Default; end
        else if(state_change && car_main_lt_reg != 0) begin state_nxt = MainLeft; end
        else if(state_change  && car_side_s_reg != 0) begin state_nxt = SideStraight; end
        else if(state_change && car_side_lt_reg != 0) begin state_nxt = SideLeft; end
        else begin state_nxt = MainStraight; end
      end
      MainLeft: begin
        if(state_change && !car_side_s_reg && !car_side_lt_reg) begin state_nxt = Default; end
        else if(state_change && car_side_s_reg != 0) begin state_nxt = SideStraight; end
        else if(state_change && car_side_lt_reg != 0) begin state_nxt = SideLeft; end
        else begin state_nxt = MainLeft; end
      end
      SideStraight: begin
        if(state_change && !car_side_lt_reg) begin state_nxt = Default; end
        else if(state_change && car_side_lt_reg != 0) begin state_nxt = SideLeft; end
        else begin state_nxt = SideStraight; end
      end
      SideLeft: begin
        if(state_change) begin state_nxt = Default; end
        else begin state_nxt = SideLeft; end
      end
      Default: begin
        if(out_valid_reg && !car_main_s_reg && !car_main_lt_reg && !car_side_s_reg && !car_side_lt_reg) begin state_nxt = Default; end
        else begin state_nxt = MainStraight; end
      end
      default: state_nxt = Default;
    endcase
  end
  
end
////////////////////////////////////////////// calculate light second
always_comb begin
  case(state)
    MainStraight: begin
      if(car_main_s_reg <= 4) begin green = 4; end
      else begin green = 8; end
      if(!car_main_lt_reg && !car_side_s_reg && !car_side_lt_reg)  begin yellow = 0; red = 0; end
      else if(car_main_lt_reg != 0)                                begin yellow = 1; red = 2; end
      else                                                         begin yellow = 1; red = 1; end
    end
    MainLeft: begin 
      if(car_main_lt_reg <= 3) begin green = 3; end
      else if(car_main_lt_reg <= 6) begin green = 6; end
      else begin green = 9; end
      if(!car_side_s_reg && !car_side_lt_reg)                  begin yellow = 1; red = 2; end
      else                                                     begin yellow = 1; red = 1; end
    end
    SideStraight: begin
      if(car_side_s_reg <= 3)        begin green = 3; yellow = 1; red = 2;end
      else if(car_side_s_reg <= 6)   begin green = 6; yellow = 1; red = 2;end
      else                           begin green = 9; yellow = 1; red = 2;end
    end
    SideLeft: begin
      green = ((car_side_lt_reg + 1) / 2) * 2 ; yellow = 1; red = 2;
    end
    default: begin green = 1; yellow = 0; red = 0; end
  endcase
end

///////////////////////////// out_valid
always_ff @ (posedge clk or negedge rst_n) begin
  if(!rst_n) begin
    out_valid_reg <= 0;
    out_valid_delay <= 0;
  end
  else begin
    out_valid_reg <= out_valid_nxt;
    out_valid_delay <= out_valid_reg;
  end
end
 always_comb begin
  out_valid = out_valid_delay;
  if(in_valid) begin
    out_valid_nxt = 1;
  end
  else if(state_nxt == Default) begin
    out_valid_nxt = 0;
  end
  else begin
    out_valid_nxt = out_valid_reg;
  end
 end
///////////////////////// input

always_ff @(posedge clk or negedge rst_n) begin
  if(!rst_n) begin
    car_main_s_reg <= 0;
    car_main_lt_reg <= 0;
    car_side_s_reg <= 0;
    car_side_lt_reg <= 0;
  end
  else begin
    car_main_s_reg <= car_main_s_nxt;
    car_main_lt_reg <= car_main_lt_nxt;
    car_side_s_reg <= car_side_s_nxt;
    car_side_lt_reg <= car_side_lt_nxt;
  end
end

always_comb begin
  if(in_valid) begin
    car_main_s_nxt = car_main_s;
    car_main_lt_nxt = car_main_lt;
    car_side_s_nxt = car_side_s;
    car_side_lt_nxt = car_side_lt;
  end
  else if(!out_valid_nxt)begin
    car_main_s_nxt = 0;
    car_main_lt_nxt = 0;
    car_side_s_nxt = 0;
    car_side_lt_nxt = 0;
  end
  else begin
    car_main_s_nxt = car_main_s_reg;
    car_main_lt_nxt = car_main_lt_reg;
    car_side_s_nxt = car_side_s_reg;
    car_side_lt_nxt = car_side_lt_reg;
  end
end

///////////////////////////////////// light FSM
parameter Green = 2;
parameter Yellow = 1;
parameter Red = 0;
always_ff @(posedge clk or negedge rst_n) begin
  if(!rst_n) begin
    light_state <= Green;
  end
  else begin
    light_state <= light_state_nxt;
  end
end
always_comb begin
  case(light_state)
    Green: begin
      light_time = green;
      if(light_timer_done && yellow != 0 && out_valid_nxt == 1) begin
        light_state_nxt = Yellow;
      end
      else if(light_timer_done && !yellow && out_valid == 1 ) begin
        light_state_nxt = Red;
      end
      else begin
        light_state_nxt = Green;
      end
    end
    Yellow: begin
      light_time = yellow;
      if(light_timer_done && out_valid_nxt == 1) begin
        light_state_nxt = Red;
      end
      else begin
        light_state_nxt = Yellow;
      end
    end
    Red: begin
      light_time = red;
      if(light_timer_done)  begin
        light_state_nxt = Green;
      end
      else begin
        light_state_nxt = Red;
      end
    end
    default: begin light_state_nxt = Green; light_time = 0; end//
  endcase
  
  if(light_state == Red && light_timer_done || 
     light_state == Green && light_timer_done && !car_main_lt_reg && !car_side_s_reg && !car_side_lt_reg) begin
      state_change = 1;
  end
  else begin
    state_change = 0;
  end
end
///////////////////////// light timer
Timer light_timer( .t_clk(clk),.t_load(light_load) ,.cnt(light_time), .done(light_timer_done));

////////////////////////////////// light output 
always_ff @(posedge clk) begin
  light_load <= light_load_nxt;
end
always_ff @(posedge clk or negedge rst_n) begin
  if(!rst_n) begin
    light_main <= 2;
    light_side <= 0;
  end
  else begin
    light_main <= light_main_nxt;
    light_side <= light_side_nxt;
  end
end
always_comb begin
  if(out_valid_reg && !out_valid || light_timer_done && state != Default) light_load_nxt = 1;
  else light_load_nxt = 0;

  case(state_nxt)  
    MainStraight,MainLeft: begin
      case(light_state_nxt)
        Green:  begin if(state_nxt == MainStraight) light_main_nxt = 2; else light_main_nxt = 3; end
        Yellow: begin light_main_nxt = 1;  end
        Red:    begin light_main_nxt = 0; end
        default begin light_main_nxt = 2; end
      endcase
      light_side_nxt = 0;
    end
    SideStraight,SideLeft: begin
      case(light_state_nxt)
        Green:  begin light_main_nxt = 0;   if(state_nxt == SideStraight) light_side_nxt = 2; else light_side_nxt = 3; end
        Yellow: begin light_main_nxt = 0;   light_side_nxt = 1; end
        Red:    begin light_main_nxt = 0;   light_side_nxt = 0; end
        default begin light_main_nxt = 2;   light_side_nxt = 0; end
      endcase
    end
    default begin
      light_main_nxt = 2;   light_side_nxt = 0; 
      end
  endcase
end
endmodule

////////////////////////////////////////////////// module timer
module Timer (
  t_clk,
 // t_rst_n,
  t_load,
  cnt,
  done
);
input t_clk;
input t_load;
input logic [3:0] cnt;
output logic done;
logic [3:0]cnt_reg;
logic [3:0]cnt_nxt;
always_ff @(posedge t_clk ) begin
     cnt_reg <= cnt_nxt;
end
always_comb begin
  if(cnt == 1) done = 1;
  else done = 0;

  if(t_load) begin
    cnt_nxt = cnt;
  end
  else begin
    if(cnt_reg > 2) begin
      cnt_nxt = cnt_reg - 1;
      done = 0;
    end
    else begin
      cnt_nxt = cnt_reg;
      done = 1;
    end
  end
end
endmodule